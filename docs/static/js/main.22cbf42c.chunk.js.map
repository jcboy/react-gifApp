{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","id","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACK,uBACGO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAkBfG,GAAG,oB,+BC1BNC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHZ,GAAIY,EAAIZ,GACRa,MAAOD,EAAIC,MACXT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QATvB,kBAYZM,GAZY,4CAAH,sDCEPM,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IAEhC,OADAa,QAAQC,IAAI,CAACL,QAAOT,QAEhB,sBAAKe,UAAU,0CAAf,UAEI,qBAAKC,IAAKhB,EAAMiB,IAAKR,IACrB,4BAAIA,QCJHS,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAe,IAAD,EAEdf,mBAAS,CAC/BsB,KAAM,GACNc,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAwBxC,OAjBAC,qBAAW,WAEPzB,EAAQC,GACHyB,MAAM,SAACC,GAIAH,EAAS,CAAChB,KAAMmB,EAAML,SAAS,SAM5C,CAACrB,IAIGsB,EDpBwBK,CAAa3B,GAAhCY,EAHuB,EAG5BL,KAAac,EAHe,EAGfA,QAGpB,OACI,gCACI,oBAAIJ,UAAU,oCAAd,SAAmDjB,IAElDqB,GAAW,mBAAGJ,UAAU,mCAAb,qBAHhB,IAKI,qBAAKA,UAAU,YAAf,SACKL,EAAOH,KAAM,SAAAC,GAAG,OAEb,aAF0B,CAEzB,EAAD,eAAiCA,GAAdA,EAAIZ,aEf9B8B,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,YAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAS9B,OACI,sBAAKiC,UAAU,YAAf,UACI,wCACA,cAAC,EAAD,CAAajC,cAAeA,IAC5B,uBAEA,6BAEQ6C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCjBlC8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.22cbf42c.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length>2){\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n             <input \n                type=\"text\" \n                value= {inputValue}\n                onChange={handleInputChange}\n                id=\"input-search\"\n                \n            /> \n\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n};\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=wq5gSocUJNymzaORSFAQjB2WsK5RrWZm`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;   //setImages(gifs);         //console.log(gifs);\n}\n","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {  // esto {id, title, url} en lugar de props\n    console.log({title, url});\n    return (\n        <div className=\"card animate__animated animate__fadeIn \">\n\n            <img src={url}  alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\nimport {GifGridItem} from \"./GifGridItem\";\n\nexport const GifGrid = ({category}) => {\n    //const [images, setImages] = useState([]);\n\n    const {data:images, loading} = useFetchGifs(category); // :images change the name of data\n    /*console.log(images); console.log(loading);*/\n\n    return (\n        <div>\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n\n            {loading && <p className='animate__animated animate__flash'>loading</p> } {/*loading ? 'Cargando' : 'Data cargada'*/}\n\n            <div className=\"card-grid\">\n                {images.map(  img  => (       // widthout destructuring = (img);\n                    // {...img} esto envia cada una de la propiedades de manera indendiente\n                    <GifGridItem key={ img.id } { ...img } /> //<GifGridItem key={img.id} img={img} />\n                    )\n                )}\n\n                {/*\n                <ul>\n                    {images.map( ({id, title}) => (       // widthout destructuring = (img);\n                         <li key={id }> {title} </li>\n                        )\n                    )}\n                </ul>\n                */}\n            </div>\n        </div>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport {getGifs} from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {  // esto se lanza solo cuando se cambia la categoria\n\n        getGifs(category)\n            .then( (imgs) => {\n\n                // setTimeout(()=>{\n\n                    setState({data: imgs, loading: false});\n\n                // }, 3000)\n\n            } )\n        // getGifs(category).then(setImages); // es igual Ã  imgs => setImages(imgs)\n    }, [category] )\n\n    /*setTimeout( () => {setState({ data: ['bla', 'ble', 'bli'], loading: false})}, 3000)*/\n\n    return state; // { data:[], loading: true };\n\n}\n\n\n","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport {GifGrid} from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['friends']);\n    \n    //const handleAdd = () => {\n    //    //setCategories(['Man1', ...categories]);\n    //    setCategories(cats => ['Huljk', ...cats]);\n    // }\n\n    return (\n        <div className='container'>\n            <h2>GifApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n            <ul>\n                {\n                    categories.map( category  => (\n                        <GifGrid\n                            key={ category }\n                            category={ category }\n                        />\n                    ))\n                }\n            </ul>\n            \n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}